<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用的 linux 命令</title>
      <link href="/2020/03/11/%E5%B8%B8%E7%94%A8%E7%9A%84-linux-%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/11/%E5%B8%B8%E7%94%A8%E7%9A%84-linux-%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间轮</title>
      <link href="/2020/02/11/%E6%97%B6%E9%97%B4%E8%BD%AE/"/>
      <url>/2020/02/11/%E6%97%B6%E9%97%B4%E8%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/11/%E6%97%B6%E9%97%B4%E8%BD%AE/31B7D0923A35FE17D9BDB0239EDD1E6C.jpg" alt="IMAGE"></p><h1 id="什么是时间轮"><a href="#什么是时间轮" class="headerlink" title="什么是时间轮"></a>什么是时间轮</h1><ul><li>调度模型<br>时间轮是为解决高效调度任务而产生的调度模型</li><li>数据结构<br>通常由 hash table 和 链表 实现的数据结构</li><li>延时任务、周期性任务<br>应用场景主要在延迟大规模的延时任务、周期性的定时任务等。目前在 Kafka、caffeine、netty 等各种任务调度功能中作为调度器使用。</li></ul><a id="more"></a><h1 id="为什么用时间轮？"><a href="#为什么用时间轮？" class="headerlink" title="为什么用时间轮？"></a>为什么用时间轮？</h1><blockquote><p>相比传统的队列形式的调度器来说，时间轮能够批量高效的管理各种延时任务、周期任务、通知任务等等。</p></blockquote><p><img src="C5289A9D65884B641BA7A5309BE89922.jpg" alt="IMAGE"></p><p>我们对比传统的简单调度器实现与时间轮实现，发现时间轮的效能更高效。</p><p><em>（可能会有同学想问，为什么简单时间轮都是 O(1) 的时间复杂度，为什么还需要后面的时间轮实现呢？ 哈哈哈哈哈，后面会说下简单时间轮实现的问题）</em></p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>我们抽象一个调度器模型中，包含如下接口实现：</p><ul><li>启动定时器<br>加入调度任务</li><li>终止定时器<br>终止调度任务</li><li>周期清算<br>每一个执行周期对调度器中任务的处理</li><li>过期处理<br>任务过期时的回调函数</li></ul><p>定时器这里这是调度模型的实例化，这里只讨论定时任务的处理模式，其他周期任务、通知任务等实现基础原理于此相同，只是会有更具体的优化方案。</p><h2 id="无序列表定时器"><a href="#无序列表定时器" class="headerlink" title="无序列表定时器"></a>无序列表定时器</h2><p>由链表实现，任务在调度器中存储将要过期的时间，无序存储。</p><ul><li>启动定时器： 直接在链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接在链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 需要遍历链表中所有节点，时间复杂度 O(n)</li></ul><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><blockquote><p>时间周期：1s，过期判断：剩余 0s 过期</p></blockquote><p>初始化定时器，在链表后面直接 push 节点，节点中存储的为将要过期的剩余时间。这里初始化为剩余 5s、3s、1s、7s、2s、1s。<br><img src="3C6EB29A5A25E8A4FD2D3F1B12DC0D23.jpg" alt="IMAGE"><br>执行一个周期，经过处理后，如下：<br><img src="6747389F667B6C77C96E96B4CD677328.jpg" alt="IMAGE"><br>遍历定时器中所有节点，将剩余时间为 0s 的任务进行过期处理<br>在执行一个周期，处理如下，以此类推<br><img src="781335EA5A718BB47133132B6C19415E.jpg" alt="IMAGE"></p><h2 id="有序列表定时器"><a href="#有序列表定时器" class="headerlink" title="有序列表定时器"></a>有序列表定时器</h2><p>与无需列表定时器相比，都是又链表实现，但存储的是绝对的过期时间</p><ul><li>启动定时器： 有序插入，比较时间按照时间大小有序插入，时间复杂度 O(n)</li><li>终止定时器： 在链表中查找任务，删除节点，时间复杂度 O(n)</li><li>周期清算: 找到执行最后一个过期任务即可，无需遍历整个链表，时间复杂度 O(1)</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>时间周期：1m，过期判断：当前时间 &gt;= 任务时间</p></blockquote><p>初始化链表，插入任务 「12:41:30」 ，有序插入<br><img src="EE1AAA8546C9DC259C54D8C706A69360.jpg" alt="IMAGE"><br>比较前后节点，将该任务插入到 第1节点 和 第2节点 之间<br><img src="BFA6C3097F87AF1764884E19C6D5F4CA.jpg" alt="IMAGE"><br>执行一个时间周期，发现 任务1 和 任务2 过期，进行过期处理，移出任务<br><img src="DE5A7C254D2A2938AFDAA7AD44C111ED.jpg" alt="IMAGE"><br>再执行两个时间的情况如下，期间 任务3 过期，进行了过期处理和移出操作，后续操作类似<br><img src="FCF2CC34CBF631623C8C07564082A1E9.jpg" alt="IMAGE"></p><h3 id="定时器树"><a href="#定时器树" class="headerlink" title="定时器树"></a>定时器树</h3><p>不难看出，「有序列表定时器」的性能瓶颈在于插入时的任务排序，「定时器树」则在「有序列表定时器」的基础上进行优化，以有序树的形式进行任务存储。</p><ul><li>启动定时器： 有序插入，比较时间按照时间大小有序插入，时间复杂度 O($log_n$)</li><li>终止定时器： 在链表中查找任务，删除节点，时间复杂度 O($log_n$)</li><li>周期清算: 找到执行最后一个过期任务即可，无需遍历整个链表，时间复杂度 O(1)</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>基础原理与「有序列表定时器」 相同，聪明的读者不需要举例了吧~   （主要是树的图太难画了 (╯‵□′)╯︵┻━┻）</p><h1 id="时间轮怎么实现的？"><a href="#时间轮怎么实现的？" class="headerlink" title="时间轮怎么实现的？"></a>时间轮怎么实现的？</h1><h2 id="简单时间轮实现"><a href="#简单时间轮实现" class="headerlink" title="简单时间轮实现"></a>简单时间轮实现</h2><p>由一个 hash table 和简单链表实现，hash table 的 key 为时间单位，value 为简单链表的 root 节点。链表解决 hash 冲突</p><blockquote><p>说明：</p><ul><li>max interval: key代表的 slot 需要固定的最大值</li><li>每一个 slot 代表一个时间单位</li><li>移动到 slot 处理所有 task</li></ul></blockquote><ul><li>启动定时器： 直接 hash 到链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接 hash 到链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 链表中的所有节点的过期处理，时间复杂度认为是 O(1)</li></ul><p>简单时间轮实现的最大问题是内存空间占用，当 max interval 为32位 int 时，需要有$2^{32}$个 slot<br>极端举例，有个 timestamp = 1 时启动的定时器，和一个 timestamp 为 100000 的任务，则需要有 slot 至少为 100000 定时器，来执行这一个任务<br>所以上面说的虽然简单时间轮性能最高，但是还会有适用场景更广泛的实现</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><blockquote><p>时间周期：1s，过期判断：当前时间 &gt;= 任务时间</p></blockquote><p>在12:00:00启动，直接插入 hash 的链表中，这里插入两个「12:00:00」任务 对应的 key 中，</p><p><img src="93BDE1902EF8911B01E75B1214F2BC99.jpg" alt="IMAGE"></p><p>当执行两个时间单位后，「12:00:10」slot 中的任务全部处理完成，进行了移出操作<br>「12:00:12」的任务判断过期，进行过期处理和移出操作<br><img src="1679AA7E163C6979C2B03C178E90A2EF.jpg" alt="IMAGE"></p><h2 id="有序定时器列表的哈希轮"><a href="#有序定时器列表的哈希轮" class="headerlink" title="有序定时器列表的哈希轮"></a>有序定时器列表的哈希轮</h2><p>简单时间轮的 max interval 限制了其适用场景，这里对此进行优化。<br>一个 hash table 构成的循环缓冲区 和 上面提到的「有序列表定时器」来实现</p><blockquote><p>说明：</p><ul><li>循环缓冲区</li><li>每一个 slot 代表一个时隙</li><li>有序列表解决冲突<br>循环缓冲区中的 key 为 hash 值</li></ul></blockquote><ul><li>启动定时器： 直接 hash 到链表,进行有序插入，时间复杂度 O(1) 最坏为 O($log_n$)</li><li>终止定时器： 直接 hash 到链表,查找删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 链表中的所有节点的过期处理，时间复杂度认为是 O(1)</li></ul><p>极端举例，当所有任务 hash 到一个 slot 中时，时间复杂度 = 「有序列表定时器」时间复杂度</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><blockquote><p>时间周期：1s，过期判断：当前时间 &gt;= 任务时间 , hash 函数：任务秒数/10*10，例如 hash(12:00:01) = 00,hash(12:02:05) = 00<br>当然这个 hash 函数只是举例(这样更好理解也好画图 O(∩_∩)O~~)</p></blockquote><p>12:00:00启动时间轮，插入任务「12:00:01」「12:02:05」「12:15:00」<br><img src="3E36E0F9B33EEF64C158A2E02DE3766D.jpg" alt="IMAGE"><br>执行到 12:10:12 时，共执行了612个周期清算，期间 任务「12:00:01」「12:02:05」「12:09:21」过期，执行了过期处理和移出操作<br><img src="0EEF263846F08C1864E4EFBE45807F2D.jpg" alt="IMAGE"></p><h2 id="无序定时器列表的哈希轮"><a href="#无序定时器列表的哈希轮" class="headerlink" title="无序定时器列表的哈希轮"></a>无序定时器列表的哈希轮</h2><p>「有序定时器列表的哈希轮」的变体，存储的不是绝对的到期时间，而是每个任务需要在时间轮中遍历的环数<br>一个 hash table 构成的循环缓冲区 和 上面提过的「无序列表定时器」实现</p><blockquote><p>说明：<br>循环缓冲区<br>每一个 slot 代表一个时隙<br>每个 task 经过 hash 转换为需要轮转的圈数<br>slot 数量为 s,任务剩余时间 t，环数为 c，slot key 为 k,当前环数为bc,当前slot key 为 bk<br>则 c(环数) = t / s - bc , k(slot key) = t % s - bk</p></blockquote><ul><li>启动定时器： 直接 hash 到链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接 hash 到链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 到的「无序列表定时器」的周期清算，平均来看，时间复杂度认为是 O(1)</li></ul><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><blockquote><p>时间周期：1s，过期判断：剩余轮数 0 , hash 函数：当前时间秒数， slot num：60<br>当然这个 hash 函数只是举例(这样更好理解也好画图 O(∩_∩)O~~)</p></blockquote><p>12:00:00 时启动定时器。<br>插入任务「12:41:00」时，处理为 c(环数) = (12:41:00 - 12:00:00)/60 - 0 = 41,k(slot key) = (12:41:00 - 12:00:00)%60 - 0= 0</p><p><img src="6FEFAAFE1E4330DACA5ACE5AEB145663.jpg" alt="IMAGE"></p><p>同上，插入各种任务后时间轮如下所示, 举例 任务「12:20:01」c = (12:20:01 - 12:00:00)/60 - 0 = 20,k = (12:20:01 - 12:00:00)%60-0 = 1</p><p><img src="9C0559DF89FC1448F69A50284D83E998.jpg" alt="IMAGE"></p><p>每一个执行周期到对应的 slot 时，该 slot 对应的链表中所有节点剩余轮数-1<br>执行到 12:19:01 时，时间轮情况如下</p><p><img src="F0ADDF89D780B837DF15E771B2441EED.jpg" alt="IMAGE"></p><p>期间，时间轮转动19圈2格， 任务「12:41:00」中对应的剩余轮树 为 41-20 ，slot 「1」也刚刚到第20次到达，所有节点剩余轮数-1，判断为0过期</p><h2 id="多级时间轮"><a href="#多级时间轮" class="headerlink" title="多级时间轮"></a>多级时间轮</h2><p>处理由简单的定时轮方法引起的存储器问题的另一种方式是在层次结构中使用多个定时轮，由多个层级来进行多次 hash</p><blockquote><p>说明：<br>多级<br>子轮转动一圈，父轮转动一格<br>从父向子前进，无子过期<br>当前时间轮 slot num 为 cs，所有下级 slot 的总值为 ps ,插入slot key 为 k,任务绝对时间戳为 t<br>则 k = t / ps % cs</p></blockquote><ul><li>启动定时器： 直接 hash 到链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接 hash 到链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 到的列表的周期清算，平均来看，时间复杂度认为是 O(1)</li></ul><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><p>我们来建立一个1天的定时器，时间轮分为3个，小时轮(24 slot)、分钟轮(60 slot)、秒轮(60 slot)<br>方便理解</p><blockquote><p>时间周期：1s，过期判断：无子轮移动</p></blockquote><p>创建的时间轮如下，看起来很想我们的手表，秒针转一起，分针转一格，分针转一圈，小时转一格<br><img src="BE4877D5C186F10EB7F1C0444E5FBE08.jpg" alt="IMAGE"></p><p>插入一个任务「03:59:04」,从最上方的轮子开始插入，先插入到小时轮中的k = 3的 slot 中</p><p><img src="67E00EA3A5463CDFE967CA245BB3CB87.jpg" alt="IMAGE"></p><p>时间轮小时轮轮转到「3」slot 时，任务「03:59:04」从小时轮向子轮移动，插入到分钟轮的 k = 59的 slot 中</p><p><img src="EA4EE7C28CB6BC11C420EDC5333342AA.jpg" alt="IMAGE"></p><p>当分钟轮移动到「59」slot 时，任务「03:59:04」从分钟轮向子轮移动，插入秒轮的 k = 4 的 slot 中</p><p><img src="71C74157FAB4BC60D4DC543D1647D088.jpg" alt="IMAGE"></p><p>当秒轮移动到「4」slot 时，任务「03:59:04」无子轮可移动，则认为过期</p><p><img src="4C694B5ADD2BEF23FB6A26086FABF0F1.jpg" alt="IMAGE"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面介绍了关于各种定时器的实现 ，当然如果要实际应用的话，还需要针对业务场景对时间轮进行针对性的优化。不过我们只要搞懂原理，基础的理论是不会变的。<br>如果有任何问题，欢迎 email 到 <a href="mailto:pzbhellp@gmail.com">pzbhellp@gmail.com</a> 或留言进行讨论</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>http:/<a href="http://www.cs.columbia.edu/~nahum/w6998/papers/sosp87-timing-wheels.pdf" target="_blank" rel="noopener">www.cs.columbia.edu/~nahum/w6998/papers/sosp87-timing-wheels.pdf</a><br>https:/<a href="http://www.lpnote.com/2017/11/15/hashed-and-hierarchical-timing-wheels/" target="_blank" rel="noopener">www.lpnote.com/2017/11/15/hashed-and-hierarchical-timing-wheels/</a></p><p>生活不仅有眼前的苟且，还有永远读不懂的诗和到不了的远方~</p><!-- markdownlint-disable MD041 MD002--> # 防止 markdownlint 报错]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/bak/hello-world.html"/>
      <url>/bak/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
    </entry>
    
    
  
</search>
