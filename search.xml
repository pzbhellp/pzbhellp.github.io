<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用的 linux 命令</title>
      <link href="/2020/03/11/%E5%B8%B8%E7%94%A8%E7%9A%84-linux-%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/11/%E5%B8%B8%E7%94%A8%E7%9A%84-linux-%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>创建一个新的tar文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar cvf archive_name.tar dirname&#x2F;</span><br></pre></td></tr></table></figure><p>解压tar文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvf archive_name.tar</span><br></pre></td></tr></table></figure><p>查看tar文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar tvf archive_name.tar</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/" target="_blank" rel="noopener">The Ultimate Tar Command Tutorial with 10 Practical Examples</a></p><a id="more"></a><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>在文件中查找字符串(不区分大小写)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -i &quot;the&quot; demo_file</span><br></pre></td></tr></table></figure><p>输出成功匹配的行，以及该行之后的三行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -A 3 -i &quot;example&quot; demo_text</span><br></pre></td></tr></table></figure><p>在一个文件夹中递归查询包含指定字符串的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -r &quot;ramesh&quot; *</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" target="_blank" rel="noopener">Get a Grip on the Grep! – 15 Practical Grep Command Examples</a></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>查找指定文件名的文件(不区分大小写)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find -iname &quot;MyProgram.c&quot;</span><br></pre></td></tr></table></figure><p>对找到的文件执行某个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find -iname &quot;MyProgram.c&quot; -exec md5sum &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>查找home目录下的所有空文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find ~ -empty</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-linux-find-command-examples/" target="_blank" rel="noopener">Mommy, I found it! — 15 Practical Linux Find Command Examples</a></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>登录到远程主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -l jsmith remotehost.example.com</span><br></pre></td></tr></table></figure><p>调试ssh客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -v -l jsmith remotehost.example.com</span><br></pre></td></tr></table></figure><p>显示ssh客户端版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -V</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2008/05/5-basic-linux-ssh-client-commands/" target="_blank" rel="noopener">5 Basic Linux SSH Client Commands</a></p><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;.$&#x2F;&#x2F;&#39; filename</span><br></pre></td></tr></table></figure><p>反转文件内容并输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n &#39;1!G; h; p&#39; filename</span><br></pre></td></tr></table></figure><p>为非空行添加行号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;&#x2F;.&#x2F;&#x3D;&#39; thegeekstuff.txt | sed &#39;N; s&#x2F;\n&#x2F; &#x2F;&#39;</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/" target="_blank" rel="noopener">Advanced Sed Substitution Examples</a></p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>删除重复行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk &#39;!($0 in array) &#123; array[$0]; print&#125;&#39; temp</span><br></pre></td></tr></table></figure><p>打印/etc/passwd中所有包含同样的uid和gid的行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F &#39;:&#39; &#39;$3&#x3D;$4&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>打印文件中的指定部分的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk &#39;&#123;print $2,$5;&#125;&#39; employee.txt</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/" target="_blank" rel="noopener">8 Powerful Awk Built-in Variables – FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</a></p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>打开文件并跳到第10行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim +10 filename.txt</span><br></pre></td></tr></table></figure><p>打开文件跳到第一个匹配的行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim +&#x2F;search-term filename.txt</span><br></pre></td></tr></table></figure><p>以只读模式打开文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim -R &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/" target="_blank" rel="noopener">How To Record and Play in Vim Editor</a></p><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>比较的时候忽略空白符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ diff -w name_list.txt name_list_new.txt</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>以升序对文件内容排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sort names.txt</span><br></pre></td></tr></table></figure><p>以降序对文件内容排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sort -r names.txt</span><br></pre></td></tr></table></figure><p>以第三个字段对/etc/passwd的内容排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sort -t: -k 3n &#x2F;etc&#x2F;passwd | more</span><br></pre></td></tr></table></figure><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>输出跟字符串oracle匹配的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ export | grep ORCALE</span><br><span class="line">declare -x ORACLE_BASE&#x3D;&quot;&#x2F;u01&#x2F;app&#x2F;oracle&quot;</span><br><span class="line">declare -x ORACLE_HOME&#x3D;&quot;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;10.2.0&quot;</span><br><span class="line">declare -x ORACLE_SID&#x3D;&quot;med&quot;</span><br><span class="line">declare -x ORACLE_TERM&#x3D;&quot;xterm&quot;</span><br></pre></td></tr></table></figure><p>设置全局环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export ORACLE_HOME&#x3D;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;10.2.0</span><br></pre></td></tr></table></figure><h2 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h2><p>将所有图片文件拷贝到外部驱动器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls *.jpg | xargs -n1 -i cp &#123;&#125; &#x2F;external-hard-drive&#x2F;directory</span><br></pre></td></tr></table></figure><p>将系统中所有jpd文件压缩打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find &#x2F; -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</span><br></pre></td></tr></table></figure><p>下载文件中列出的所有url对应的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat url-list.txt | xargs wget –c</span><br></pre></td></tr></table></figure><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>以易读的方式显示文件大小(显示为MB,GB…)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -lh</span><br><span class="line">-rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</span><br></pre></td></tr></table></figure><p>以最后修改时间升序列出文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -ltr</span><br></pre></td></tr></table></figure><p>在文件名后面显示文件类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -F</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/07/linux-ls-command-examples/" target="_blank" rel="noopener">Unix LS Command: 15 Practical Examples</a></p><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>输出当前工作目录</p><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>cd -可以在最近工作的两个目录间切换</p><p>使用shopt -s cdspell可以设置自动对cd命令进行拼写检查</p><p>更多示例：<a href="http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/" target="_blank" rel="noopener">6 Awesome Linux cd command Hacks</a></p><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>创建一个*.gz的压缩文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gzip test.txt</span><br></pre></td></tr></table></figure><p>解压*.gz文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gzip -d test.txt.gz</span><br></pre></td></tr></table></figure><p>显示压缩的比率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gzip -l *.gz</span><br><span class="line">     compressed        uncompressed  ratio uncompressed_name</span><br><span class="line">          23709               97975  75.8% asp-patch-rpms.txt</span><br></pre></td></tr></table></figure><h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><p>创建*.bz2压缩文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bzip2 test.txt</span><br></pre></td></tr></table></figure><p>解压*.bz2文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bzip2 -d test.txt.bz2</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2010/10/bzcommand-examples/" target="_blank" rel="noopener">BZ is Eazy! bzip2, bzgrep, bzcmp, bzdiff, bzcat, bzless, bzmore examples</a></p><h2 id="uzip"><a href="#uzip" class="headerlink" title="uzip"></a>uzip</h2><p>解压*.zip文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip test.zip</span><br></pre></td></tr></table></figure><p>查看*.zip文件的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ unzip -l jasper.zip</span><br><span class="line">Archive:  jasper.zip</span><br><span class="line">Length     Date   Time    Name</span><br><span class="line">--------    ----   ----    ----</span><br><span class="line">40995  11-30-98 23:50   META-INF&#x2F;MANIFEST.MF</span><br><span class="line">32169  08-25-98 21:07   classes_</span><br><span class="line">15964  08-25-98 21:07   classes_names</span><br><span class="line">10542  08-25-98 21:07   classes_ncomp</span><br></pre></td></tr></table></figure><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>关闭系统并立即关机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ shutdown -h now</span><br></pre></td></tr></table></figure><p>10分钟后关机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ shutdown -h +10</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ shutdown -r now</span><br></pre></td></tr></table></figure><p>重启期间强制进行系统检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ shutdown -Fr now</span><br></pre></td></tr></table></figure><h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ftp IP&#x2F;hostname</span><br><span class="line">ftp&gt; mget *.html</span><br></pre></td></tr></table></figure><p>显示远程主机上文件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; mls *.html -</span><br><span class="line">&#x2F;ftptest&#x2F;features.html</span><br><span class="line">&#x2F;ftptest&#x2F;index.html</span><br><span class="line">&#x2F;ftptest&#x2F;othertools.html</span><br><span class="line">&#x2F;ftptest&#x2F;samplereport.html</span><br><span class="line">&#x2F;ftptest&#x2F;usage.html</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/ftp-sftp-tutorial/" target="_blank" rel="noopener">FTP and SFTP Beginners Guide with 10 Examples</a></p><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>查看某个用户的crontab入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -u john -l</span><br></pre></td></tr></table></figure><p>设置一个每十分钟执行一次的计划任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;10 * * * * &#x2F;home&#x2F;ramesh&#x2F;check-disk-space</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/" target="_blank" rel="noopener">Linux Crontab: 15 Awesome Cron Job Examples</a></p><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>service命令用于运行System V init脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p><p>查看服务状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service ssh status</span><br></pre></td></tr></table></figure><p>查看所有服务状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service --status-all</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service ssh restart</span><br></pre></td></tr></table></figure><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p><p>查看当前正在运行的所有进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | more</span><br></pre></td></tr></table></figure><p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -efH | more</span><br></pre></td></tr></table></figure><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p><p>默认情况下free会以字节为单位输出内存的使用量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ free</span><br><span class="line">           total       used       free     shared    buffers     cached</span><br><span class="line">Mem:       3566408    1580220    1986188          0     203988     902960</span><br><span class="line">-&#x2F;+ buffers&#x2F;cache:     473272    3093136</span><br><span class="line">Swap:      4000176          0    4000176</span><br></pre></td></tr></table></figure><p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ free -g</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:             3          1          1          0          0          0</span><br><span class="line">-&#x2F;+ buffers&#x2F;cache:          0          2</span><br><span class="line">Swap:            3          0          3</span><br></pre></td></tr></table></figure><p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ramesh@ramesh-laptop:~$ free -t</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:       3566408    1592148    1974260          0     204260     912556</span><br><span class="line">-&#x2F;+ buffers&#x2F;cache:     475332    3091076</span><br><span class="line">Swap:      4000176          0    4000176</span><br><span class="line">Total:     7566584    1592148    5974436</span><br></pre></td></tr></table></figure><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p><p>Current Sort Field:  P  for window 1:Def<br>Select sort field via field letter, type any other key to return</p><p>  a: PID        = Process Id              v: nDRT       = Dirty Pages count<br>  d: UID        = User Id                 y: WCHAN      = Sleeping in Function<br>  e: USER       = User Name               z: Flags      = Task Flags<br>  ……..<br>如果只想显示某个特定用户的进程，可以使用-u选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ top -u oracle</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/" target="_blank" rel="noopener">Can You Top This? 15 Practical Linux Top Command Examples</a></p><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>显示文件系统的磁盘使用情况，默认情况下df -k 将以字节为单位输出磁盘的使用量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ df -k</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;sda1             29530400   3233104  24797232  12% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda2            120367992  50171596  64082060  44% &#x2F;home</span><br></pre></td></tr></table></figure><p>使用-h选项可以以更符合阅读习惯的方式显示磁盘使用量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on</span><br><span class="line">&#x2F;dev&#x2F;disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   &#x2F;</span><br><span class="line">devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   &#x2F;dev</span><br><span class="line">map -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   &#x2F;net</span><br><span class="line">map auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   &#x2F;home</span><br><span class="line">&#x2F;dev&#x2F;disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   &#x2F;Volumes&#x2F;BOOTCAMP</span><br><span class="line">&#x2F;&#x2F;app@izenesoft.cn&#x2F;public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   &#x2F;Volumes&#x2F;public</span><br></pre></td></tr></table></figure><p>使用-T选项显示文件系统类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ df -T</span><br><span class="line">Filesystem    Type   1K-blocks      Used Available Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;sda1     ext4    29530400   3233120  24797216  12% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda2     ext4   120367992  50171596  64082060  44% &#x2F;home</span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>kill用于终止一个进程。一般我们会先用ps -ef查找某个进程得到它的进程号，然后再使用kill -9 进程号终止该进程。你还可以使用killall、pkill、xkill来终止进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep vim</span><br></pre></td></tr></table></figure><p>ramesh    7243  7222  9 22:43 pts/2    00:00:00 vim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kill -9 7243</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/12/4-ways-to-kill-a-process-kill-killall-pkill-xkill/" target="_blank" rel="noopener">4 Ways to Kill a Process – kill, killall, pkill, xkill</a></p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除文件前先确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -i filename.txt</span><br></pre></td></tr></table></figure><p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -i file*</span><br></pre></td></tr></table></figure><p>递归删除文件夹下所有文件，并删除该文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r example</span><br></pre></td></tr></table></figure><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -p file1 file2</span><br></pre></td></tr></table></figure><p>拷贝file1到file2，如果file2存在会提示是否覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -i file1 file2</span><br></pre></td></tr></table></figure><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv -i file1 file2</span><br></pre></td></tr></table></figure><p>注意如果使用-f选项则不会进行提示</p><p>-v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv -v file1 file2</span><br></pre></td></tr></table></figure><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat file1 file2</span><br></pre></td></tr></table></figure><p>-n命令可以在每行的前面加上行号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat -n &#x2F;etc&#x2F;logrotate.conf</span><br><span class="line">    1&#x2F;var&#x2F;log&#x2F;btmp &#123;</span><br><span class="line">    2    missingok</span><br><span class="line">    3    monthly</span><br><span class="line">    4    create 0660 root utmp</span><br><span class="line">    5    rotate 1</span><br><span class="line">    6&#125;</span><br></pre></td></tr></table></figure><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir &#x2F;u01</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mount &#x2F;dev&#x2F;sdb1 &#x2F;u01</span><br></pre></td></tr></table></figure><p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;dev&#x2F;sdb1 &#x2F;u01 ext2 defaults 0 2</span><br></pre></td></tr></table></figure><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>chmod用于改变文件和目录的权限</p><p>给指定文件的属主和属组所有权限(包括读、写、执行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod ug+rwx file.txt</span><br></pre></td></tr></table></figure><p>删除指定文件的属组的所有权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod g-rwx file.txt</span><br></pre></td></tr></table></figure><p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod -R ug+rwx file.txt</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/chmod-command-examples/" target="_blank" rel="noopener">7 Chmod Command Examples for Beginners</a></p><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>chown用于改变文件属主和属组</p><p>同时将某个文件的属主改为oracle，属组改为db</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown oracle:dba dbora.sh</span><br></pre></td></tr></table></figure><p>使用-R选项对目录和目录下的文件进行递归修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R oracle:dba &#x2F;home&#x2F;oracle</span><br></pre></td></tr></table></figure><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ passwd</span><br></pre></td></tr></table></figure><p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ passwd USERNAME</span><br></pre></td></tr></table></figure><p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ passwd -d USERNAME</span><br></pre></td></tr></table></figure><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>在home目录下创建一个名为temp的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~&#x2F;temp</span><br></pre></td></tr></table></figure><p>使用-p选项可以创建一个路径上所有不存在的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p dir1&#x2F;dir2&#x2F;dir3&#x2F;dir4&#x2F;</span><br></pre></td></tr></table></figure><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p>ifconfig用于查看和配置Linux系统的网络接口</p><p>查看所有网络接口及其状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig -a</span><br></pre></td></tr></table></figure><p>使用up和down命令启动或停止某个接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig eth0 up</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig eth0 down</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/ifconfig-7-examples-to-configure-network-interface/" target="_blank" rel="noopener">Ifconfig: 7 Examples To Configure Network Interface</a></p><h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p>uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux john-laptop 2.6.32-24-generic #41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找ls的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ whereis ls</span><br><span class="line">ls: &#x2F;bin&#x2F;ls &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;ls.1.gz &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1p&#x2F;ls.1p.gz</span><br></pre></td></tr></table></figure><p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ whereis -u -B &#x2F;tmp -f lsmk</span><br><span class="line">lsmk: &#x2F;tmp&#x2F;lsmk</span><br></pre></td></tr></table></figure><h2 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h2><p>wathis显示某个命令的描述信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ whatis ls</span><br><span class="line">ls(1)  - list directory contents</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ whatis ifconfig</span><br><span class="line">ifconfig (8)         - configure a network interface</span><br></pre></td></tr></table></figure><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p><p>下面的命令会显示系统中所有包含crontab字符串的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ locate crontab</span><br><span class="line">&#x2F;etc&#x2F;anacrontab</span><br><span class="line">&#x2F;etc&#x2F;crontab</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;crontab</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;cron&#x2F;examples&#x2F;crontab2english.pl.gz</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;crontab.1.gz</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;man&#x2F;man5&#x2F;anacrontab.5.gz</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;man&#x2F;man5&#x2F;crontab.5.gz</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;vim&#x2F;vim72&#x2F;syntax&#x2F;crontab.vim</span><br></pre></td></tr></table></figure><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>显示某个命令的man页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man crontab</span><br></pre></td></tr></table></figure><p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man SECTION-NUMBER commandname</span><br></pre></td></tr></table></figure><p>man页面一般可以分为8种命令类型</p><p>用户命令<br>系统调用<br>c库函数<br>设备与网络接口<br>文件格式<br>游戏与屏保<br>环境、表、宏<br>系统管理员命令和后台运行命令<br>例如，我们执行whatis crontab，你可以看到crontab有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ whatis crontab</span><br><span class="line">crontab (1)          - maintain crontab files for individual users (V3)</span><br><span class="line">crontab (5)          - tables for driving cron</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man 5 crontab</span><br></pre></td></tr></table></figure><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>tail命令默认显示文件最后的10行文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail filename.txt</span><br></pre></td></tr></table></figure><p>你可以使用-n选项指定要显示的行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -n N filename.txt</span><br></pre></td></tr></table></figure><p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f log-file</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/" target="_blank" rel="noopener">3 Methods To View tail -f output of Multiple Log Files in One Terminal</a></p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ less huge-log-file.log</span><br></pre></td></tr></table></figure><p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p><p>CTRL+F – forward one window<br>CTRL+B – backward one window<br>更多示例：<a href="http://www.thegeekstuff.com/2010/02/unix-less-command-10-tips-for-effective-navigation/" target="_blank" rel="noopener">Unix Less Command: 10 Tips for Effective Navigation</a></p><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su - USERNAME</span><br></pre></td></tr></table></figure><p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[john@dev-server]$ su - raj -c &#39;ls&#39;</span><br><span class="line"></span><br><span class="line">[john@dev-server]$</span><br></pre></td></tr></table></figure><p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su -s &#39;SHELLNAME&#39; USERNAME</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p><p>连接一个远程数据库，需要输入密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p -h 192.168.1.2</span><br></pre></td></tr></table></figure><p>连接本地数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure><p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><p>使用yum安装apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install httpd</span><br></pre></td></tr></table></figure><p>更新apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum update httpd</span><br></pre></td></tr></table></figure><p>卸载/删除apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove httpd</span><br></pre></td></tr></table></figure><h2 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h2><p>使用rpm安装apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</span><br></pre></td></tr></table></figure><p>更新apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</span><br></pre></td></tr></table></figure><p>卸载/删除apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ev httpd</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2010/07/rpm-command-examples/" target="_blank" rel="noopener">RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages</a></p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>ping一个远程主机，只发5个数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping -c 5 gmail.com</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/11/ping-tutorial-13-effective-ping-command-examples/" target="_blank" rel="noopener">Ping Tutorial: 15 Effective Ping Command Examples</a></p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>设置系统日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ date -s &quot;01&#x2F;31&#x2F;2010 23:59:53&quot;</span><br></pre></td></tr></table></figure><p>当你修改了系统时间，你需要同步硬件时间和系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hwclock –systohc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hwclock --systohc –utc</span><br></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>使用wget从网上下载软件、音乐、视频</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;prdownloads.sourceforge.net&#x2F;sourceforge&#x2F;nagios&#x2F;nagios-3.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>下载文件并以指定的文件名保存文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O taglist.zip http:&#x2F;&#x2F;www.vim.org&#x2F;scripts&#x2F;download_script.php?src_id&#x3D;7701</span><br></pre></td></tr></table></figure><p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/" target="_blank" rel="noopener">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间轮</title>
      <link href="/2020/02/11/%E6%97%B6%E9%97%B4%E8%BD%AE/"/>
      <url>/2020/02/11/%E6%97%B6%E9%97%B4%E8%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/11/%E6%97%B6%E9%97%B4%E8%BD%AE/31B7D0923A35FE17D9BDB0239EDD1E6C.jpg" alt="IMAGE"></p><h1 id="什么是时间轮"><a href="#什么是时间轮" class="headerlink" title="什么是时间轮"></a>什么是时间轮</h1><ul><li>调度模型<br>时间轮是为解决高效调度任务而产生的调度模型</li><li>数据结构<br>通常由 hash table 和 链表 实现的数据结构</li><li>延时任务、周期性任务<br>应用场景主要在延迟大规模的延时任务、周期性的定时任务等。目前在 Kafka、caffeine、netty 等各种任务调度功能中作为调度器使用。</li></ul><a id="more"></a><h1 id="为什么用时间轮？"><a href="#为什么用时间轮？" class="headerlink" title="为什么用时间轮？"></a>为什么用时间轮？</h1><blockquote><p>相比传统的队列形式的调度器来说，时间轮能够批量高效的管理各种延时任务、周期任务、通知任务等等。</p></blockquote><p><img src="C5289A9D65884B641BA7A5309BE89922.jpg" alt="IMAGE"></p><p>我们对比传统的简单调度器实现与时间轮实现，发现时间轮的效能更高效。</p><p><em>（可能会有同学想问，为什么简单时间轮都是 O(1) 的时间复杂度，为什么还需要后面的时间轮实现呢？ 哈哈哈哈哈，后面会说下简单时间轮实现的问题）</em></p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>我们抽象一个调度器模型中，包含如下接口实现：</p><ul><li>启动定时器<br>加入调度任务</li><li>终止定时器<br>终止调度任务</li><li>周期清算<br>每一个执行周期对调度器中任务的处理</li><li>过期处理<br>任务过期时的回调函数</li></ul><p>定时器这里这是调度模型的实例化，这里只讨论定时任务的处理模式，其他周期任务、通知任务等实现基础原理于此相同，只是会有更具体的优化方案。</p><h2 id="无序列表定时器"><a href="#无序列表定时器" class="headerlink" title="无序列表定时器"></a>无序列表定时器</h2><p>由链表实现，任务在调度器中存储将要过期的时间，无序存储。</p><ul><li>启动定时器： 直接在链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接在链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 需要遍历链表中所有节点，时间复杂度 O(n)</li></ul><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><blockquote><p>时间周期：1s，过期判断：剩余 0s 过期</p></blockquote><p>初始化定时器，在链表后面直接 push 节点，节点中存储的为将要过期的剩余时间。这里初始化为剩余 5s、3s、1s、7s、2s、1s。<br><img src="3C6EB29A5A25E8A4FD2D3F1B12DC0D23.jpg" alt="IMAGE"><br>执行一个周期，经过处理后，如下：<br><img src="6747389F667B6C77C96E96B4CD677328.jpg" alt="IMAGE"><br>遍历定时器中所有节点，将剩余时间为 0s 的任务进行过期处理<br>在执行一个周期，处理如下，以此类推<br><img src="781335EA5A718BB47133132B6C19415E.jpg" alt="IMAGE"></p><h2 id="有序列表定时器"><a href="#有序列表定时器" class="headerlink" title="有序列表定时器"></a>有序列表定时器</h2><p>与无需列表定时器相比，都是又链表实现，但存储的是绝对的过期时间</p><ul><li>启动定时器： 有序插入，比较时间按照时间大小有序插入，时间复杂度 O(n)</li><li>终止定时器： 在链表中查找任务，删除节点，时间复杂度 O(n)</li><li>周期清算: 找到执行最后一个过期任务即可，无需遍历整个链表，时间复杂度 O(1)</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>时间周期：1m，过期判断：当前时间 &gt;= 任务时间</p></blockquote><p>初始化链表，插入任务 「12:41:30」 ，有序插入<br><img src="EE1AAA8546C9DC259C54D8C706A69360.jpg" alt="IMAGE"><br>比较前后节点，将该任务插入到 第1节点 和 第2节点 之间<br><img src="BFA6C3097F87AF1764884E19C6D5F4CA.jpg" alt="IMAGE"><br>执行一个时间周期，发现 任务1 和 任务2 过期，进行过期处理，移出任务<br><img src="DE5A7C254D2A2938AFDAA7AD44C111ED.jpg" alt="IMAGE"><br>再执行两个时间的情况如下，期间 任务3 过期，进行了过期处理和移出操作，后续操作类似<br><img src="FCF2CC34CBF631623C8C07564082A1E9.jpg" alt="IMAGE"></p><h3 id="定时器树"><a href="#定时器树" class="headerlink" title="定时器树"></a>定时器树</h3><p>不难看出，「有序列表定时器」的性能瓶颈在于插入时的任务排序，「定时器树」则在「有序列表定时器」的基础上进行优化，以有序树的形式进行任务存储。</p><ul><li>启动定时器： 有序插入，比较时间按照时间大小有序插入，时间复杂度 O($log_n$)</li><li>终止定时器： 在链表中查找任务，删除节点，时间复杂度 O($log_n$)</li><li>周期清算: 找到执行最后一个过期任务即可，无需遍历整个链表，时间复杂度 O(1)</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>基础原理与「有序列表定时器」 相同，聪明的读者不需要举例了吧~   （主要是树的图太难画了 (╯‵□′)╯︵┻━┻）</p><h1 id="时间轮怎么实现的？"><a href="#时间轮怎么实现的？" class="headerlink" title="时间轮怎么实现的？"></a>时间轮怎么实现的？</h1><h2 id="简单时间轮实现"><a href="#简单时间轮实现" class="headerlink" title="简单时间轮实现"></a>简单时间轮实现</h2><p>由一个 hash table 和简单链表实现，hash table 的 key 为时间单位，value 为简单链表的 root 节点。链表解决 hash 冲突</p><blockquote><p>说明：</p><ul><li>max interval: key代表的 slot 需要固定的最大值</li><li>每一个 slot 代表一个时间单位</li><li>移动到 slot 处理所有 task</li></ul></blockquote><ul><li>启动定时器： 直接 hash 到链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接 hash 到链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 链表中的所有节点的过期处理，时间复杂度认为是 O(1)</li></ul><p>简单时间轮实现的最大问题是内存空间占用，当 max interval 为32位 int 时，需要有$2^{32}$个 slot<br>极端举例，有个 timestamp = 1 时启动的定时器，和一个 timestamp 为 100000 的任务，则需要有 slot 至少为 100000 定时器，来执行这一个任务<br>所以上面说的虽然简单时间轮性能最高，但是还会有适用场景更广泛的实现</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><blockquote><p>时间周期：1s，过期判断：当前时间 &gt;= 任务时间</p></blockquote><p>在12:00:00启动，直接插入 hash 的链表中，这里插入两个「12:00:00」任务 对应的 key 中，</p><p><img src="93BDE1902EF8911B01E75B1214F2BC99.jpg" alt="IMAGE"></p><p>当执行两个时间单位后，「12:00:10」slot 中的任务全部处理完成，进行了移出操作<br>「12:00:12」的任务判断过期，进行过期处理和移出操作<br><img src="1679AA7E163C6979C2B03C178E90A2EF.jpg" alt="IMAGE"></p><h2 id="有序定时器列表的哈希轮"><a href="#有序定时器列表的哈希轮" class="headerlink" title="有序定时器列表的哈希轮"></a>有序定时器列表的哈希轮</h2><p>简单时间轮的 max interval 限制了其适用场景，这里对此进行优化。<br>一个 hash table 构成的循环缓冲区 和 上面提到的「有序列表定时器」来实现</p><blockquote><p>说明：</p><ul><li>循环缓冲区</li><li>每一个 slot 代表一个时隙</li><li>有序列表解决冲突<br>循环缓冲区中的 key 为 hash 值</li></ul></blockquote><ul><li>启动定时器： 直接 hash 到链表,进行有序插入，时间复杂度 O(1) 最坏为 O($log_n$)</li><li>终止定时器： 直接 hash 到链表,查找删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 链表中的所有节点的过期处理，时间复杂度认为是 O(1)</li></ul><p>极端举例，当所有任务 hash 到一个 slot 中时，时间复杂度 = 「有序列表定时器」时间复杂度</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><blockquote><p>时间周期：1s，过期判断：当前时间 &gt;= 任务时间 , hash 函数：任务秒数/10*10，例如 hash(12:00:01) = 00,hash(12:02:05) = 00<br>当然这个 hash 函数只是举例(这样更好理解也好画图 O(∩_∩)O~~)</p></blockquote><p>12:00:00启动时间轮，插入任务「12:00:01」「12:02:05」「12:15:00」<br><img src="3E36E0F9B33EEF64C158A2E02DE3766D.jpg" alt="IMAGE"><br>执行到 12:10:12 时，共执行了612个周期清算，期间 任务「12:00:01」「12:02:05」「12:09:21」过期，执行了过期处理和移出操作<br><img src="0EEF263846F08C1864E4EFBE45807F2D.jpg" alt="IMAGE"></p><h2 id="无序定时器列表的哈希轮"><a href="#无序定时器列表的哈希轮" class="headerlink" title="无序定时器列表的哈希轮"></a>无序定时器列表的哈希轮</h2><p>「有序定时器列表的哈希轮」的变体，存储的不是绝对的到期时间，而是每个任务需要在时间轮中遍历的环数<br>一个 hash table 构成的循环缓冲区 和 上面提过的「无序列表定时器」实现</p><blockquote><p>说明：<br>循环缓冲区<br>每一个 slot 代表一个时隙<br>每个 task 经过 hash 转换为需要轮转的圈数<br>slot 数量为 s,任务剩余时间 t，环数为 c，slot key 为 k,当前环数为bc,当前slot key 为 bk<br>则 c(环数) = t / s - bc , k(slot key) = t % s - bk</p></blockquote><ul><li>启动定时器： 直接 hash 到链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接 hash 到链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 到的「无序列表定时器」的周期清算，平均来看，时间复杂度认为是 O(1)</li></ul><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><blockquote><p>时间周期：1s，过期判断：剩余轮数 0 , hash 函数：当前时间秒数， slot num：60<br>当然这个 hash 函数只是举例(这样更好理解也好画图 O(∩_∩)O~~)</p></blockquote><p>12:00:00 时启动定时器。<br>插入任务「12:41:00」时，处理为 c(环数) = (12:41:00 - 12:00:00)/60 - 0 = 41,k(slot key) = (12:41:00 - 12:00:00)%60 - 0= 0</p><p><img src="6FEFAAFE1E4330DACA5ACE5AEB145663.jpg" alt="IMAGE"></p><p>同上，插入各种任务后时间轮如下所示, 举例 任务「12:20:01」c = (12:20:01 - 12:00:00)/60 - 0 = 20,k = (12:20:01 - 12:00:00)%60-0 = 1</p><p><img src="9C0559DF89FC1448F69A50284D83E998.jpg" alt="IMAGE"></p><p>每一个执行周期到对应的 slot 时，该 slot 对应的链表中所有节点剩余轮数-1<br>执行到 12:19:01 时，时间轮情况如下</p><p><img src="F0ADDF89D780B837DF15E771B2441EED.jpg" alt="IMAGE"></p><p>期间，时间轮转动19圈2格， 任务「12:41:00」中对应的剩余轮树 为 41-20 ，slot 「1」也刚刚到第20次到达，所有节点剩余轮数-1，判断为0过期</p><h2 id="多级时间轮"><a href="#多级时间轮" class="headerlink" title="多级时间轮"></a>多级时间轮</h2><p>处理由简单的定时轮方法引起的存储器问题的另一种方式是在层次结构中使用多个定时轮，由多个层级来进行多次 hash</p><blockquote><p>说明：<br>多级<br>子轮转动一圈，父轮转动一格<br>从父向子前进，无子过期<br>当前时间轮 slot num 为 cs，所有下级 slot 的总值为 ps ,插入slot key 为 k,任务绝对时间戳为 t<br>则 k = t / ps % cs</p></blockquote><ul><li>启动定时器： 直接 hash 到链表后面 push ，时间复杂度 O(1)</li><li>终止定时器： 直接 hash 到链表中删除节点，时间复杂度 O(1)</li><li>周期清算: 执行 hash 到的列表的周期清算，平均来看，时间复杂度认为是 O(1)</li></ul><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><p>我们来建立一个1天的定时器，时间轮分为3个，小时轮(24 slot)、分钟轮(60 slot)、秒轮(60 slot)<br>方便理解</p><blockquote><p>时间周期：1s，过期判断：无子轮移动</p></blockquote><p>创建的时间轮如下，看起来很想我们的手表，秒针转一起，分针转一格，分针转一圈，小时转一格<br><img src="BE4877D5C186F10EB7F1C0444E5FBE08.jpg" alt="IMAGE"></p><p>插入一个任务「03:59:04」,从最上方的轮子开始插入，先插入到小时轮中的k = 3的 slot 中</p><p><img src="67E00EA3A5463CDFE967CA245BB3CB87.jpg" alt="IMAGE"></p><p>时间轮小时轮轮转到「3」slot 时，任务「03:59:04」从小时轮向子轮移动，插入到分钟轮的 k = 59的 slot 中</p><p><img src="EA4EE7C28CB6BC11C420EDC5333342AA.jpg" alt="IMAGE"></p><p>当分钟轮移动到「59」slot 时，任务「03:59:04」从分钟轮向子轮移动，插入秒轮的 k = 4 的 slot 中</p><p><img src="71C74157FAB4BC60D4DC543D1647D088.jpg" alt="IMAGE"></p><p>当秒轮移动到「4」slot 时，任务「03:59:04」无子轮可移动，则认为过期</p><p><img src="4C694B5ADD2BEF23FB6A26086FABF0F1.jpg" alt="IMAGE"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面介绍了关于各种定时器的实现 ，当然如果要实际应用的话，还需要针对业务场景对时间轮进行针对性的优化。不过我们只要搞懂原理，基础的理论是不会变的。<br>如果有任何问题，欢迎 email 到 <a href="mailto:pzbhellp@gmail.com">pzbhellp@gmail.com</a> 或留言进行讨论</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>http:/<a href="http://www.cs.columbia.edu/~nahum/w6998/papers/sosp87-timing-wheels.pdf" target="_blank" rel="noopener">www.cs.columbia.edu/~nahum/w6998/papers/sosp87-timing-wheels.pdf</a><br>https:/<a href="http://www.lpnote.com/2017/11/15/hashed-and-hierarchical-timing-wheels/" target="_blank" rel="noopener">www.lpnote.com/2017/11/15/hashed-and-hierarchical-timing-wheels/</a></p><p>生活不仅有眼前的苟且，还有永远读不懂的诗和到不了的远方~</p><!-- markdownlint-disable MD041 MD002--> # 防止 markdownlint 报错]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/bak/hello-world.html"/>
      <url>/bak/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
    </entry>
    
    
  
</search>
